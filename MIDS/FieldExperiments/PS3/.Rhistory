dev.off()
gscat2
dev.off()
gscat2
positions(order(positions$value1)[1:50])
positions[order(positions$value1)[1:50],]
players[order(players$value1)[1:50],]
players[order(players$rank1)[1:50],]
ptable.sub <- subset(players, adp < 150 & !(name %in% low.names))[,c("adp","value1","pos")]
require(ggplot2)
foldername <- "C:/Users/Ross/Documents/R/FantasyFootball"
filename <- "consensus_forecasts"
pathname <- paste0(foldername,"/",filename,".csv")
rawdata <- read.csv(pathname, stringsAsFactors = F)
players <- rawdata
rec.points <- 0
players$proj <- players$stan.proj + rec.points*players$rec
roster <- data.frame(
pos=c("QB","RB","WR","TE"),
start=c(1,2.5,2.5,1),
bench=c(0.75,3,3,0.25))
teams <- 12
#calculate ADP rank (turns ADP in to 1 through N rank)
max.adp.rank <- 160
players$adp.rank <- rank(players$adp, ties.method="average")
players$adp.rank[players$adp.rank > max.adp.rank] <- max.adp.rank
#first benchmark
#simple average of the total number of each position expected to be taken
roster$simple.bm <- NA
for(i in 1:nrow(roster)){
pos.n <- round((roster$start[i]+roster$bench[i])*teams)
pos.players <- subset(players, pos==roster$pos[i])
pos.players <- pos.players[order(pos.players$proj,decreasing=T),]
roster$simple.bm[i] <- mean(pos.players$proj[1:pos.n])
}
roster
players$cost1 <- roster$simple.bm[match(players$pos,roster$pos)]
players$value1 <- with(players, proj-cost1)
players$rank1 <- rank(-players$value1)
players[order(players$rank1)[1:40],]
#second benchmark
#average of "second starters".
roster$second.bm <- NA
for(i in 1:nrow(roster)){
start.n <- round(roster$start[i]*teams)
pos.players <- subset(players, pos==roster$pos[i])
pos.players <- pos.players[order(pos.players$proj,decreasing=T),]
roster$second.bm[i] <- mean(pos.players$proj[start.n+(1:start.n)])
}
roster
players$cost2 <- roster$second.bm[match(players$pos,roster$pos)]
players$value2 <- with(players, proj-cost2)
players$rank2 <- rank(-players$value2)
players[order(players$rank2)[1:40],]
#third rank
#rank by iterating through all players
#at each stage you consider the best RB, best WR, best TE, best QB and decide btw them
#the "value" of each is their projected minus the average of the remaining projected at their position
#the "value" of the last player is the replacement cost
continue = T
max.rank <- 200
players$rank3 <- max.rank
players$value3 <- 0
roster3 <- roster
roster3$current <- 1
roster3$bm <- ceiling((roster3$start + roster3$bench)*teams) + 1
roster3$best <- 0
roster3$best.index <- 0
count = 1
while(continue & count <= max.rank){
for(i in 1:nrow(roster3)){
roster.i <- roster3[i,]
pos.sort <- subset(players,pos==roster.i$pos)
pos.sort <- pos.sort[order(pos.sort$proj,decreasing=T),]
pos.top <- pos.sort$proj[roster.i$current]
pos.bm <- mean(pos.sort$proj[(roster.i$current+1):roster.i$bm])
roster3$best[i] <- pos.top - pos.bm
roster3$best.index[i] <- which(players$name==pos.sort$name[roster.i$current])
}
which.max <- which(roster3$best == max(roster3$best))
roster3$current[which.max] <- roster3$current[which.max] + 1
players$rank3[roster3$best.index[which.max]] <- count
players$value3[roster3$best.index[which.max]] <- roster3$best[which.max]
continue = !prod(roster3$current >= roster3$bm)
count = count + 1
}
#put data in to javascript file
players$rank4 <- rank(with(players, (rank2+rank3)/2))
players[order(players$rank4)[1:50],]
####
#Add manual low ranks
low.names <- c("Le'Veon Bell", "Jonathan Stewart","Willis McGahee")
players$rank4[players$name %in% low.names] <- 161
#all data w/ pos info
data_js <- 'var all_data = { '
for(this.pos in c("QB","RB","TE","WR")){
data_js <- paste0(data_js,'\n"', this.pos,'": { \n')
adp.string <- '"ADP": {'
rank.string <- '"RANK": {'
data.subset <- subset(players[order(players$rank4)[1:150],],pos==this.pos)
for(i in 1:nrow(data.subset)){
player.i <- data.subset[i,]
adp.string <- paste0(adp.string, "\n",'"',player.i$name,'": ',round(player.i$adp.rank),"," )
rank.string <- paste0(rank.string, "\n",'"',player.i$name,'": ',round(player.i$rank4),"," )
}
data_js <- paste0(data_js,gsub(",$","",adp.string),"\n},\n",gsub(",$","",rank.string),"\n}\n},")
}
data_js <- gsub(",$","",data_js)
data_js <- paste0(data_js,"\n};")
cat(data_js,file="ff_slopegraph_files/ff_data.js")
players[order(players$rank4)[1:50],]
#####
## Plot of projections adjusted for average
plot.subset <- subset(players, adp < 150 & !(name %in% low.names))[,c("adp","value1","pos")]
plot.fit <- data.frame(adp=c(),value1=c(),pos=c())
for(pos.i in roster$pos){
fit.subset <- subset(plot.subset, pos==pos.i)
quad.add <- loess(value1~adp^4 + adp^3 + adp^2 + adp , fit.subset)
#plot.fit <- rbind(plot.fit,data.frame(adp=quad.add$x,value1=quad.add$fitted,pos=pos.i))
kern.add <- ksmooth(x=fit.subset$adp,y=fit.subset$value1,bandwidth=teams)
plot.fit <- rbind(plot.fit,data.frame(adp=kern.add$x,value1=kern.add$y,pos=pos.i))
}
gscatter <- ggplot(plot.subset, aes(x=adp,y=value1,col=pos)) + geom_point(size=3,alpha=0.4)
gscatter <- gscatter + geom_smooth(aes(x=adp,y=value1,col=pos),data=plot.fit, se=F,size=1)
gscatter <- gscatter + xlab("Average Draft Position") + ylab("[Projected Points] - [Position Average]")
gscatter
png(file="ff_rank_images/all_positions.png",width=800,height=600)
gscatter
dev.off()
gscat2 <- gscatter + facet_grid(pos~.)
png(file="ff_rank_images/facet_positions.png",bg="transparent",family="helvetica",width=800,height=1500)
gscat2
dev.off()
#######
## Build html for rank & value table
ptable.sub <- subset(players, adp < 150 & !(name %in% low.names))[,c("adp","value1","pos")]
ptable.sub <- ptable.sub[order(ptables.sub$value1),]
ptable.str <- '
<html>\n
<LINK href="player_table_style.css" rel="stylesheet" type="text/css"></LINK>
<table id="player_table">
<tr><td></td><td>Player</td><td>Value</td><td>ADP</td></tr>
<tr><td>1</td><td>Adrian Peterson</td><td>150</td><td>1.5</td></tr>
<tr><td>2</td><td>Jamaal Charles</td><td>135</td><td>3</td></tr>
</tr>
</table>
</html>
'
ptable.sub <- subset(players, adp < 150 & !(name %in% low.names))[,c("adp","value1","pos")]
ptable.sub <- ptable.sub[order(ptables.sub$value1),]
ptable.sub <- ptable.sub[order(ptable.sub$value1),]
head(ptable.sub)
?order
?order
?order
ptable.sub <- ptable.sub[order(ptable.sub$value1,dec=T),]
ptable.sub <- ptable.sub[order(ptable.sub$value1,decreasing=T),]
head(ptable.sub)
ptable.sub <- subset(players, adp < 150 & !(name %in% low.names))[,c("name","adp","value1","pos")]
ptable.sub <- ptable.sub[order(ptable.sub$value1,decreasing=T),]
head(ptable.sub)
ptable.str <- '
<html>\n
<LINK href="player_table_style.css" rel="stylesheet" type="text/css"></LINK>
<table id="player_table">
<tr><td></td><td>Player</td><td>Value</td><td>ADP</td></tr>
<tr><td>1</td><td>Adrian Peterson</td><td>150</td><td>1.5</td></tr>
<tr><td>2</td><td>Jamaal Charles</td><td>135</td><td>3</td></tr>
</tr>
</table>
</html>
'
print(ptable.str)
cat(ptable.str)
ptable.str <- paste0(ptable.str,'</table>\n</html>')
cat(ptable.str)
ptable.str <- '<html>
<LINK href="player_table_style.css" rel="stylesheet" type="text/css"></LINK>
<table id="player_table">
<tr><td></td><td>Player</td><td>Value</td><td>ADP</td></tr>\n'
for(i in 1:nrow(ptable.sub)){
ptable.str <- paste0(ptable.str,
'<tr><td>',
i,
'</td><td>',
ptable.sub$name[i],
'</td><td>',
round(ptable.sub$value1[i],1),
'</td><td>',
round(ptable.sub$adp[i],1),
'</td></tr>\n'
}
ptable.str <- paste0(ptable.str,'</table>\n</html>')
cat(ptable.str)
nrow(ptable.sub)
#######
## Build html for rank & value table
ptable.sub <- subset(players, adp < 150 & !(name %in% low.names))[,c("name","adp","value1","pos")]
ptable.sub <- ptable.sub[order(ptable.sub$value1,decreasing=T),]
ptable.str <- '<html>
<LINK href="player_table_style.css" rel="stylesheet" type="text/css"></LINK>
<table id="player_table">
<tr><td></td><td>Player</td><td>Value</td><td>ADP</td></tr>\n'
for(i in 1:nrow(ptable.sub)){
ptable.str <- paste0(ptable.str,
'<tr><td>',
i,
'</td><td>',
ptable.sub$name[i],
'</td><td>',
round(ptable.sub$value1[i],1),
'</td><td>',
round(ptable.sub$adp[i],1),
'</td></tr>\n'
)
}
ptable.str <- paste0(ptable.str,'</table>\n</html>')
cat(ptable.str)
cat(ptable.str,file="ff_slopegraph_files/ff_data.js")
cat(data_js,file="ff_slopegraph_files/ff_data.js")
#######
## Build html for rank & value table
ptable.sub <- subset(players, adp < 150 & !(name %in% low.names))[,c("name","adp","value1","pos")]
ptable.sub <- ptable.sub[order(ptable.sub$value1,decreasing=T),]
ptable.str <- '<html>
<LINK href="player_table_style.css" rel="stylesheet" type="text/css"></LINK>
<table id="player_table">
<tr><td></td><td>Player</td><td>Value</td><td>ADP</td></tr>\n'
for(i in 1:nrow(ptable.sub)){
ptable.str <- paste0(ptable.str,
'<tr><td>',
i,
'</td><td>',
ptable.sub$name[i],
'</td><td>',
round(ptable.sub$value1[i],1),
'</td><td>',
round(ptable.sub$adp[i],1),
'</td></tr>\n'
)
}
ptable.str <- paste0(ptable.str,'</table>\n</html>')
cat(ptable.str,file="ff_rank_files/player_values.html")
gscatter <- ggplot(plot.subset, aes(x=adp,y=value1,col=pos)) + geom_point(size=3,alpha=0.4)
gscatter <- gscatter + geom_smooth(aes(x=adp,y=value1,col=pos),data=plot.fit, se=F,size=1)
gscatter <- gscatter + xlab("Average Draft Position") + ylab("[Projected Points] - [Position Average]")
gscatter
png(file="ff_rank_files/all_positions.png",width=800,height=600)
gscatter
dev.off()
gscatter
gscatter
dev.off
dev.off()
gscatter
gscat2 <- gscatter + facet_wrap(~pos,nrow=2)
png(file="ff_rank_files/facet_positions.png",bg="transparent",family="helvetica",width=800,height=1500)
gscat2
dev.off()
png(file="ff_rank_files/facet_positions.png",bg="transparent",family="helvetica",width=800,height=600)
gscat2
dev.off()
png(file="ff_rank_files/all_positions.png",width=1600,height=1200)
gscatter
dev.off()
?png
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,pointsize=24)
gscatter
dev.off()
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,pointsize=24,ppi=144)
gscatter
dev.off()
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,pointsize=24,ppi=144)
?png
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,pointsize=24,res=144)
gscatter
dev.off()
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,res=144)
gscatter
dev.off()
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,res=144,pointsize=12)
gscatter
dev.off()
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,res=144,pointsize=24)
gscatter
dev.off()
png(file="ff_rank_files/facet_positions.png",bg="transparent",family="helvetica",width=1600,height=1200,res=144)
gscat2
dev.off()
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,res=144)
gscatter
dev.off()
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,res=200)
gscatter
dev.off()
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,res=180)
gscatter
dev.off()
gscat2 <- gscatter + facet_wrap(~pos,nrow=2)
png(file="ff_rank_files/facet_positions.png",bg="transparent",family="helvetica",width=1600,height=1200,res=180)
gscat2
dev.off()
subset(players,pos=="RB")
gscatter <- gscatter + guide_legend(title="")
gscatter <- ggplot(plot.subset, aes(x=adp,y=value1,col=pos)) + geom_point(size=3,alpha=0.4)
gscatter <- gscatter + geom_smooth(aes(x=adp,y=value1,col=pos),data=plot.fit, se=F,size=1)
gscatter <- gscatter + xlab("Average Draft Position") + ylab("[Projected Points] - [Position Average]")
gscatter <- gscatter + guide_legend(title="")
gscatter <- ggplot(plot.subset, aes(x=adp,y=value1,col=pos)) + geom_point(size=3,alpha=0.4)
gscatter <- gscatter + geom_smooth(aes(x=adp,y=value1,col=pos),data=plot.fit, se=F,size=1)
gscatter <- gscatter + xlab("Average Draft Position") + ylab("[Projected Points] - [Position Average]")
gscatter <- gscatter + scale_color_discrete(guide=guide_legend(title=""))
gscatter
png(file="ff_rank_files/all_positions.png",width=1600,height=1200,res=180)
gscatter
dev.off()
gscat2 <- gscatter + facet_wrap(~pos,nrow=2)
gscat2
png(file="ff_rank_files/facet_positions.png",bg="transparent",family="helvetica",width=1600,height=1200,res=180)
gscat2
dev.off()
aggregate(treat_ad ~ studyno, fb_df, mean)
aggregate(name_recall ~ studyno, fb_df, mean)
####################
# ROSS BOBERG
# FIELD EXPERIMENTS
# PROBLEM SET 3
####################
####################
### Functions & Libraries
#Function to compute clustered standard errors in R
cl <- function(dat, fm, cluster){
require(sandwich, quietly = TRUE)
require(lmtest, quietly = TRUE)
M <- length(unique(cluster))
N <- length(cluster)
K <- fm$rank
dfc <- (M/(M-1))*((N-1)/(N-K))
uj <- apply(estfun(fm),2, function(x) tapply(x, cluster, sum));
vcovCL <- dfc*sandwich(fm, meat=crossprod(uj)/N)
coeftest(fm, vcovCL)
}
##################################################
# set wd
#setwd('F:/Docs/Personal/rross/MIDS/FieldExperiments/PS3')
#setwd('C:/Users/Ross/Documents/R/rross/MIDS/FieldExperiments/PS3')
setwd('C:/Users/Ross/Documents/GitHub/rross/MIDS/FieldExperiments/PS3')
#####################
### Problem 2
# load data
fb_df = read.csv('broockman_green_anon_pooled_fb_users_only.csv', stringsAsFactors=F)
### a) CI w/ no cluster
fb_sub1 = subset(fb_df, studyno == 1)
fb_sub2 = subset(fb_df, studyno == 2)
# run model
fb_lm1 = lm(name_recall ~ treat_ad, fb_sub1)
fb_t1= summary(fb_lm1)$coef[2,]
# calculate confidence interval
fb_ci1 = rep(fb_t1[1], 2) + 1.96 * fb_t1[2] * c(-1, 1)
fb_ci1
# ci: -0.0510, 0.0314
### c)  Cluster sanity check?
cl_minmax = aggregate(treat_ad ~ cluster, fb_df, function(x){return(c(min = min(x), max = max(x)))})
cl_dif_treat = cl_minmax[cl_minmax$treat_ad[,'min'] != cl_minmax$treat_ad[,'max'],]
# there seem to be 48 clusters that were not consistently treated / untreated
nrow(cl_dif_treat)
### d) Confidence interval with clusters
fb_lm1_cl = cl(fb_sub1, fb_lm1, fb_sub1$cluster)
fb_ci1_cl = rep(fb_lm1_cl[2,1], 2) + 1.96 * fb_lm1_cl[2,2] * c(-1, 1)
fb_ci1_cl
# ci: -0.0564, 0.0368
### e) Cluster CI for Study 2
fb_sub2 = fb_sub2[complete.cases(fb_sub2$name_recall, fb_sub2$treat_ad, fb_sub2$cluster),]
fb_lm2 = lm(name_recall ~ treat_ad, fb_sub2)
fb_lm2_cl = cl(fb_sub2, fb_lm2, fb_sub2$cluster)
fb_ci2_cl = rep(fb_lm2_cl[2,1], 2) + 1.96 * fb_lm2_cl[2,2] * c(-1, 1)
fb_ci2_cl
# ci: -0.0724, 0.0668
### f) Cluster CI for Both
fb_df = fb_df[complete.cases(fb_df$name_recall, fb_df$treat_ad, fb_df$cluster),]
fb_lm0 = lm(name_recall ~ treat_ad, fb_df)
fb_lm0_cl = cl(fb_df, fb_lm0, fb_df$cluster)
fb_lm0_cl
# est: -0.1551, p-value 7*10^-9
fb_ci0_cl = rep(fb_lm0_cl[2,1], 2) + 1.96 * fb_lm0_cl[2,2] * c(-1, 1)
fb_ci0_cl
# ci: -0.2075, -0.1027
### g) Model with study dummy
fb_lm00 = lm(name_recall ~ treat_ad + studyno, fb_df)
fb_lm00_cl = cl(fb_df, fb_lm00, fb_df$cluster)
fb_lm00_cl
# est: -0.0068, p-value 0.74
fb_ci00_cl = rep(fb_lm00_cl[2,1], 2) + 1.96 * fb_lm00_cl[2,2] * c(-1, 1)
fb_ci00_cl
# ci: -0.0468, 0.0332
### h)
aggregate(treat_ad ~ studyno, fb_df, mean)
aggregate(name_recall ~ studyno, fb_df, mean)
####################
# ROSS BOBERG
# FIELD EXPERIMENTS
# PROBLEM SET 3
####################
####################
### Functions & Libraries
#Function to compute clustered standard errors in R
cl <- function(dat, fm, cluster){
require(sandwich, quietly = TRUE)
require(lmtest, quietly = TRUE)
M <- length(unique(cluster))
N <- length(cluster)
K <- fm$rank
dfc <- (M/(M-1))*((N-1)/(N-K))
uj <- apply(estfun(fm),2, function(x) tapply(x, cluster, sum));
vcovCL <- dfc*sandwich(fm, meat=crossprod(uj)/N)
coeftest(fm, vcovCL)
}
##################################################
# set wd
#setwd('F:/Docs/Personal/rross/MIDS/FieldExperiments/PS3')
setwd('C:/Users/Ross/Documents/R/rross/MIDS/FieldExperiments/PS3')
#setwd('C:/Users/Ross/Documents/GitHub/rross/MIDS/FieldExperiments/PS3')
#####################
### Problem 2
# load data
fb_df = read.csv('broockman_green_anon_pooled_fb_users_only.csv', stringsAsFactors=F)
### a) CI w/ no cluster
fb_sub1 = subset(fb_df, studyno == 1)
fb_sub2 = subset(fb_df, studyno == 2)
# run model
fb_lm1 = lm(name_recall ~ treat_ad, fb_sub1)
fb_t1= summary(fb_lm1)$coef[2,]
# calculate confidence interval
fb_ci1 = rep(fb_t1[1], 2) + 1.96 * fb_t1[2] * c(-1, 1)
fb_ci1
# ci: -0.0510, 0.0314
### c)  Cluster sanity check?
cl_minmax = aggregate(treat_ad ~ cluster, fb_df, function(x){return(c(min = min(x), max = max(x)))})
cl_dif_treat = cl_minmax[cl_minmax$treat_ad[,'min'] != cl_minmax$treat_ad[,'max'],]
# there seem to be 48 clusters that were not consistently treated / untreated
nrow(cl_dif_treat)
### d) Confidence interval with clusters
fb_lm1_cl = cl(fb_sub1, fb_lm1, fb_sub1$cluster)
fb_ci1_cl = rep(fb_lm1_cl[2,1], 2) + 1.96 * fb_lm1_cl[2,2] * c(-1, 1)
fb_ci1_cl
# ci: -0.0564, 0.0368
### e) Cluster CI for Study 2
fb_sub2 = fb_sub2[complete.cases(fb_sub2$name_recall, fb_sub2$treat_ad, fb_sub2$cluster),]
fb_lm2 = lm(name_recall ~ treat_ad, fb_sub2)
fb_lm2_cl = cl(fb_sub2, fb_lm2, fb_sub2$cluster)
fb_ci2_cl = rep(fb_lm2_cl[2,1], 2) + 1.96 * fb_lm2_cl[2,2] * c(-1, 1)
fb_ci2_cl
# ci: -0.0724, 0.0668
### f) Cluster CI for Both
fb_df = fb_df[complete.cases(fb_df$name_recall, fb_df$treat_ad, fb_df$cluster),]
fb_lm0 = lm(name_recall ~ treat_ad, fb_df)
fb_lm0_cl = cl(fb_df, fb_lm0, fb_df$cluster)
fb_lm0_cl
# est: -0.1551, p-value 7*10^-9
fb_ci0_cl = rep(fb_lm0_cl[2,1], 2) + 1.96 * fb_lm0_cl[2,2] * c(-1, 1)
fb_ci0_cl
# ci: -0.2075, -0.1027
### g) Model with study dummy
fb_lm00 = lm(name_recall ~ treat_ad + studyno, fb_df)
fb_lm00_cl = cl(fb_df, fb_lm00, fb_df$cluster)
fb_lm00_cl
# est: -0.0068, p-value 0.74
fb_ci00_cl = rep(fb_lm00_cl[2,1], 2) + 1.96 * fb_lm00_cl[2,2] * c(-1, 1)
fb_ci00_cl
# ci: -0.0468, 0.0332
### h)
aggregate(treat_ad ~ studyno, fb_df, mean)
aggregate(name_recall ~ studyno, fb_df, mean)
source('~/.active-rstudio-document')
ebola_df = read.csv('ebola_rct2.csv', stringsAsFactors=F)
head(ebola_df\)
head(ebola_df)
lma = lm(vomiting_day14 ~ treat_zmapp, ebola_df)
lma
summary(lma)
lmb = lm(vomiting_day14 ~ treat_zmap + vomiting_day0 + temperature_day0, ebola_df)
lmb = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0, ebola_df)
summary(lmb)
lmb = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + vomiting_day14, ebola_df)
lmd = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + vomiting_day14, ebola_df)
lmb = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0, ebola_df)
summary(lmb)
### d) Same as b) + control for day 14 vomiting
lmd = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + vomiting_day14, ebola_df)
summary(lmd)
lmb = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0, ebola_df)
summary(lmb)
lmd = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + vomiting_day14, ebola_df)
lmd = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + temperature_day14, ebola_df)
lmd = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + temperature_day14, ebola_df)
summary(lmd)
head(ebola_df)
lmf = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + male, ebola_df)
summary(lmf)
lmf = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + male + male * treat_zmapp, ebola_df)
summary(lmf)
lmf = lm(vomiting_day14 ~ vomiting_day0 + temperature_day0 + male + male * treat_zmapp, ebola_df)
summary(lmf)
lmf = lm(vomiting_day14 ~ vomiting_day0 + temperature_day0 + male * treat_zmapp, ebola_df)
summary(lmf)
lmf = lm(vomiting_day14 ~ treat_zmapp * male + vomiting_day0 + temperature_day0 , ebola_df)
summary(lmf)
?lm
head(lmf0)
head(ebola_df)
head(ebola_df)
ebola_df
